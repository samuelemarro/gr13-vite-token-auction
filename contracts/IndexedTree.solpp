// SPDX-License-Identifier: MIT
/// @title Indexed (Red-Black) Tree
/// @author Samuele Marro

pragma soliditypp ^0.8.0;

import "./RedBlackTree.solpp";

library IndexedTree {
    using RedBlackTree for *;
    struct Tree {
        RedBlackTree.Tree bids;

        // Additional mapping used to index bids by address
        mapping(address => uint256) bidPrice;
    }

    function get(Tree storage self, address _address) internal view returns (uint256, uint256) {
        uint256 bidPrice = self.bidPrice[_address];

        RedBlackTree.Node storage node = self.bids.getNode(bidPrice);
        for (uint256 i = 0; i < node.bidInfos.length; i++) {
            if (node.bidInfos[i].bidder == _address) {
                return (node.bidInfos[i].amount, bidPrice);
            }
        }

        revert("Bid not found");
    }

    function getPrice(Tree storage self, address _address) internal view returns (uint256) {
        return self.bidPrice[_address];
    }

    function numBids(Tree storage self) internal view returns(uint256) {
        uint256 count = 0;

        uint256 nodeKey = self.bids.first();
        if (nodeKey != RedBlackTree.EMPTY) {

            do {
                count += self.bids.getNode(nodeKey).bidInfos.length;
                nodeKey = self.bids.next(nodeKey);
            } while (nodeKey != RedBlackTree.EMPTY);
        }

        return count;
    }
    
    function getAll(Tree storage self) internal view returns (RedBlackTree.BidInfo[] memory) {
        uint256 nBids = numBids(self);
        RedBlackTree.BidInfo[] memory bidInfos = new RedBlackTree.BidInfo[](nBids);


        if (nBids != 0) {
            uint256 count = 0;

            uint256 nodeKey = self.bids.first();

            do {
                RedBlackTree.Node storage node = self.bids.getNode(nodeKey);
                for (uint256 i = 0; i < node.bidInfos.length; i++) {
                    bidInfos[count] = node.bidInfos[i];
                    count++;
                }

                nodeKey = self.bids.next(nodeKey);
            } while (nodeKey != RedBlackTree.EMPTY);
        }
        return bidInfos;
    }

    function exists(Tree storage self, address _address) internal view returns (bool) {
        return self.bidPrice[_address] != 0;
    }

    function insert(Tree storage self, address _address, uint256 _amount, uint256 _price) internal {
        require(!exists(self, _address), "Node already exists");

        _insertBidInfo(self, _address, _amount, _price);

        self.bidPrice[_address] = _price;
    }

    function remove(Tree storage self, address _address) internal returns(uint256, uint256) {
        require(exists(self, _address), "Node does not exist");

        uint256 price = self.bidPrice[_address];

        uint256 amount = _removeBidInfo(self, _address);

        delete self.bidPrice[_address];
        
        return (amount, price);
    }

    function _updateAmount(Tree storage self, address _address, uint256 _amount) private {

        uint256 bidPrice = self.bidPrice[_address];
        RedBlackTree.Node storage node = self.bids.getNode(bidPrice);
        for (uint256 i = 0; i < node.bidInfos.length; i++) {
            if (node.bidInfos[i].bidder == _address) {
                node.bidInfos[i].amount = _amount;
                return;
            }
        }
    }

    function _removeBidInfo(Tree storage self, address _address) private returns(uint256) {
        uint256 bidPrice = self.bidPrice[_address];
        RedBlackTree.Node storage node = self.bids.getNode(bidPrice);
        uint256 amount;

        if (node.bidInfos.length == 1) {
            // If the node has only one bid, delete it

            amount = node.bidInfos[0].amount;
            self.bids.remove(bidPrice);
        } else {
            // If the node has more than one bid, remove the bid of the address

            for (uint256 i = 0; i < node.bidInfos.length; i++) {
                if (node.bidInfos[i].bidder == _address) {
                    amount = node.bidInfos[i].amount;
                    _removeAtIndex(node.bidInfos, i);
                    break;
                }
            }
        }

        return amount;
    }

    function _insertBidInfo(Tree storage self, address _address, uint256 _amount, uint256 _price) private {
        if (self.bids.exists(_price)) {
            // Node already exists, append the bid
            RedBlackTree.Node storage node = self.bids.getNode(_price);

            node.bidInfos.push(RedBlackTree.BidInfo(_address, _amount));
        } else {
            self.bids.insert(_price, _address, _amount);
        }
    }
    
    function update(Tree storage self, address _address, uint256 _amount, uint256 _price) internal {
        require(exists(self, _address), "Node does not exist");

        uint256 bidPrice = self.bidPrice[_address];

        if (bidPrice == _price) {
            _updateAmount(self, _address, _amount);
        } else {
            _removeBidInfo(self, _address);

            // Insert the new price

            _insertBidInfo(self, _address, _amount, _price);

            // Update the bid price mapping
            self.bidPrice[_address] = _price;
        }
    }
    
    // Move the last element to the deleted spot.
    // Remove the last element.
    function _removeAtIndex(RedBlackTree.BidInfo[] storage array, uint256 index) private {
        // TODO: Shift instead of swap+delete
        for (uint256 i = index; i < array.length - 1; i++) {
            array[i] = array[i + 1];
        }
        array.pop();
    }
}